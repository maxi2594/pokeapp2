{"version":3,"sources":["helpers/getPokesApi.js","components/pokemons/characterScreen/ImageContainer.js","components/commons/ExelColums.js","components/pokemons/characterScreen/stacs/DamageStacs.js","helpers/heplsFn.js","components/commons/DescriptionBox.js","components/pokemons/characterScreen/stacs/MoveStacs.js","components/pokemons/characterScreen/TypeStacs.js","components/pokemons/characterScreen/CharacterScreen.js","context/pokeContext.js","components/UI/buttons/NavigateButtons.js","components/UI/loading/LoadIcon.js","components/pokemons/pokeCard/PokeCard.js","components/pokemons/PokeList.js","components/pokemons/PokeScreen.js","components/UI/NavBar.js","routes/DashBoardRoutes.js","routes/PrivateRoutes.js","routes/AppRouter.js","hooks/useFetchPokes.js","PokeApp.js","index.js"],"names":["getPokes","url","a","fetch","resp","json","data","Error","getCharactersData","arr","fetchArr","map","Promise","all","promises","result","ImageContainer","useState","sprites","front_default","imageSrc","setImageSrc","Object","keys","key","sprite","src","className","style","width","alt","pokemon","name","elem","onClick","ExelColums","item","values","replace","DamageStacs","damage","damageArr","entries","entriesLoop","keyword","Array","isArray","i","length","DescriptionBox","description","desc","setDesc","useEffect","then","catch","err","console","log","MoveStacs","classMove","move_damage_class","moves","activeMove","setactiveMove","s","handleClick","TypeStacs","error","state","setState","damage_relations","CharacterScreen","setData","type","setType","id","useParams","types","d","t","toUpperCase","is_battle_only","handeSetTypeStac","slot","pokeContext","createContext","NavigateButtons","handleSetUrL","next","previous","styles","container","display","alignItems","backgroundColor","justifyContent","flexDirection","marginTop","marginBottom","button","border","marginLeft","marginRight","color","height","LoadIcon","PokeCard","to","textAlign","PokeList","results","flexWrap","character","PokeScreen","useContext","stopLoading","startLoading","loading","characters","setstate","getData","useCallback","setTimeout","alert","Navbar","activeClassName","exact","DashBoardRoutes","path","render","PrivateRoutes","isAutenticated","Component","component","rest","props","AppRouter","incialState","PokeApp","inicialUrl","setUrl","pokes","useFetchPokes","localStorage","getItem","setItem","Provider","value","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.df6c8bf7.chunk.js","sourcesContent":["// const defaultUrl = `https://pokeapi.co/api/v2/pokemon-form/?limit=5&offset=5`\r\n\r\nexport const getPokes = async (url) => {\r\n    try {\r\n        const resp = await fetch(url)\r\n        const data = await resp.json();\r\n        return data\r\n\r\n    }\r\n    catch (error) {\r\n        throw Error('failed')\r\n    }\r\n}\r\nexport const getCharactersData = async (arr) => {\r\n    const fetchArr = arr.map(({ url }) => fetch(url))\r\n\r\n    try {\r\n        const promises = await Promise.all(fetchArr);\r\n        const result = await Promise.all(promises.map((resp) => resp.json()));\r\n        const data = await result;\r\n\r\n        return data;\r\n\r\n    }\r\n    catch (error) {\r\n        throw error\r\n    }\r\n}\r\n\r\nexport const getData = async (results) => {\r\n    if (results) {\r\n\r\n        const data = await getCharactersData(results)\r\n        return data\r\n    }\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const ImageContainer = ({ data }) => {\r\n\r\n    const [imageSrc, setImageSrc] = useState(data.sprites.front_default)\r\n\r\n\r\n    const sprites = (Object.keys(data.sprites).map(key => ({\r\n        sprite: [key],\r\n        src: data.sprites[key]\r\n    })))\r\n\r\n    return (\r\n        <div className='imageContainer'>\r\n            <img\r\n                style={{ width: 250 }}\r\n                src={imageSrc}\r\n                alt={data.pokemon.name}\r\n            />\r\n            <div className=\"imageSelector\">\r\n                <ul>\r\n                    {\r\n                        sprites.map(elem => (\r\n                            elem.src ?\r\n                                (<button\r\n                                    key={elem.sprite}\r\n                                    onClick={() => setImageSrc(elem.src)}\r\n                                >{elem.sprite}</button>)\r\n                                :\r\n                                null\r\n                        )\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nImageContainer.propTypes = {\r\n    data: PropTypes.object.isRequired\r\n}\r\n","import React from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const ExelColums = ({ item, values }) => {\r\n\r\n\r\n    return (\r\n        <div className='rowStat'>\r\n\r\n            <div className='columnItem'>\r\n                <span>{item.replace('/_/g', ' ')}</span>\r\n            </div>\r\n\r\n            <div className='columnValue'>\r\n                {\r\n                    values.map(elem =>\r\n                    (<span\r\n                        className={item}\r\n                        key={elem.name}\r\n                    >{elem.name}</span>)\r\n                    )\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nExelColums.propTypes = {\r\n    item: PropTypes.string.isRequired,\r\n    values: PropTypes.array.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ExelColums } from '../../../commons/ExelColums';\r\n\r\nexport const DamageStacs = ({ damage }) => {\r\n\r\n    const damageArr = Object.entries(damage)\r\n\r\n    return (\r\n        <div className='typeStacs'>\r\n            <div className='statsTitle'>\r\n                <h4>Damage Stacs</h4>\r\n            </div>\r\n            {\r\n                damageArr.map(elem =>\r\n                (<ExelColums\r\n                    key={elem[0]}\r\n                    item={elem[0]}\r\n                    values={elem[1]}\r\n                />)\r\n                )\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\nDamageStacs.propTypes = {\r\n    damage: PropTypes.object.isRequired\r\n}","\r\nexport function entriesLoop(data, keyword) {\r\n\r\n    for (var key in data) {\r\n\r\n        if (key === 'effect') {\r\n            return data[key]\r\n        }\r\n        if (data[key] === null || typeof data[key] !== 'object') {\r\n            continue\r\n        }\r\n        if (Array.isArray(data[key])) {\r\n            for (let i = 0; i < data[key].length; i++) {\r\n                const element = data[key][i];\r\n\r\n                return entriesLoop(element, keyword)\r\n            }\r\n        }\r\n        if (typeof data[key] === 'object') {\r\n            entriesLoop(data[key], keyword)\r\n        }\r\n        else {\r\n            return data\r\n        }\r\n\r\n    }\r\n\r\n    // for (const key in obj) {\r\n    //     if (Object.hasOwnProperty.call(obj, key)) {\r\n    //         const element = obj[key];\r\n\r\n    //         console.log(key);\r\n\r\n    //         if (key === 'effect') {\r\n    //             return console.log('lo encontre!!');\r\n    //         }\r\n\r\n    //         if (element === null || typeof element !== 'object') {\r\n    //             continue;\r\n    //         }\r\n\r\n    //         if (Array.isArray(element)) {\r\n    //             for (let i = 0; i < element.length; i++) {\r\n    //                 const elem = element[i];\r\n    //                 console.log('array iteration');\r\n    //                 return entriesLoop(elem);\r\n    //             }\r\n    //         }\r\n\r\n    //         if (typeof element === 'object') {\r\n    //             return entriesLoop(element);\r\n    //         }\r\n    //     }\r\n    //     return obj;\r\n    // }\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { getPokes } from '../../helpers/getPokesApi';\r\nimport { entriesLoop } from '../../helpers/heplsFn';\r\n\r\nexport const DescriptionBox = ({ data, description = 'effect' }) => {\r\n\r\n    const [desc, setDesc] = useState('')\r\n\r\n    const { name, url } = data;\r\n\r\n    useEffect(() => {\r\n\r\n        getPokes(url)\r\n            .then(data => {\r\n                const description = entriesLoop(data);\r\n                setDesc(description)\r\n            })\r\n            .catch(err => console.log(err))\r\n\r\n    }, [url])\r\n\r\n    return (\r\n        <div className='descriptionBox'>\r\n\r\n            <span className='title'> {name} </span>\r\n\r\n            <p data-testid='desc'\r\n                className='descriptionText'>\r\n                {desc}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nDescriptionBox.propTypes = {\r\n    data: PropTypes.object.isRequired\r\n}","import React, { useState } from 'react'\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { ExelColums } from '../../../commons/ExelColums';\r\nimport { DescriptionBox } from '../../../commons/DescriptionBox';\r\n\r\nexport const MoveStacs = ({\r\n    move_damage_class: classMove,\r\n    moves,\r\n}) => {\r\n\r\n    const [activeMove, setactiveMove] = useState({\r\n        name: moves[0].name,\r\n        url: moves[0].url\r\n    })\r\n\r\n    const handleClick = (elem) => {\r\n        setactiveMove(s => ({\r\n            ...s,\r\n            name: elem.name,\r\n            url: elem.url\r\n        }))\r\n    }\r\n    return (\r\n        <div className='typeStacs'>\r\n\r\n            <div className='statsTitle'>\r\n                <h4>Moves</h4>\r\n            </div>\r\n\r\n            <ExelColums\r\n                key={classMove.name}\r\n                item={'Damage Class'}\r\n                values={[classMove]}\r\n            />\r\n            <div className='movesBox'>\r\n                {\r\n                    moves.map(elem =>\r\n                    (\r\n                        <button\r\n                            //className={(activeMove.name === elem.type.name) ? 'active' : ''}\r\n                            key={elem.name}\r\n                            onClick={() => handleClick(elem)}\r\n                        >{elem.name}</button>\r\n                    )\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <DescriptionBox data={activeMove} />\r\n        </div>\r\n    )\r\n}\r\n\r\nMoveStacs.propTypes = {\r\n    move_damage_class: PropTypes.object.isRequired,\r\n    moves: PropTypes.array.isRequired\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport PropTypes, { instanceOf } from \"prop-types\";\r\nimport { getPokes } from '../../../helpers/getPokesApi'\r\nimport { DamageStacs } from './stacs/DamageStacs';\r\nimport { MoveStacs } from './stacs/MoveStacs';\r\n\r\nexport const TypeStacs = ({ src }) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: null,\r\n        error: null\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (src !== '') {\r\n\r\n            try {\r\n                getPokes(src)\r\n                    .then(data =>\r\n                        setState((s) => ({\r\n                            ...s,\r\n                            data: data\r\n                        }))\r\n                    )\r\n\r\n            } catch (error) {\r\n                setState((s) => ({\r\n                    ...s,\r\n                    error: error\r\n                }))\r\n            }\r\n        }\r\n    }, [src]);\r\n\r\n    return (\r\n        <div className='typeStacs'>\r\n            {\r\n                (state.data) ?\r\n                    (<DamageStacs damage={state.data?.damage_relations} />)\r\n                    :\r\n                    null\r\n\r\n            }\r\n            {\r\n                (state.data) ?\r\n                    (<MoveStacs {...state.data} />)\r\n                    :\r\n                    null\r\n\r\n            }\r\n            {\r\n                state.error && (<h2>{state.error}</h2>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nTypeStacs.propTypes = {\r\n    src: PropTypes.string.isRequired\r\n}\r\n","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\n\r\nimport { getPokes } from '../../../helpers/getPokesApi'\r\nimport { ImageContainer } from './ImageContainer';\r\nimport { TypeStacs } from './TypeStacs';\r\nimport \"./characterScreen.css\";\r\n\r\nexport const CharacterScreen = () => {\r\n\r\n    const [data, setData] = useState(null)\r\n    const [type, setType] = useState({\r\n        type: '',\r\n        src: ''\r\n    })\r\n\r\n    const { id } = useParams()\r\n\r\n    const handeSetTypeStac = ({ name, url }) => {\r\n        setType(s => ({\r\n            type: name,\r\n            src: url\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        try {\r\n            const data = getPokes(`https://pokeapi.co/api/v2/pokemon-form/${id}`)\r\n            data.then(data => {\r\n                setData(data)\r\n                const { types } = data;\r\n                setType((s) => ({\r\n                    ...s,\r\n                    type: types[0]?.type.name,\r\n                    src: types[0]?.type.url\r\n                }))\r\n            })\r\n\r\n        } catch (error) {\r\n            setData(d => ({ ...d }))\r\n            setType(t => ({ ...t }))\r\n        }\r\n\r\n\r\n    }, [id])\r\n\r\n    return (\r\n        data\r\n        &&\r\n        (<div className='flexContainer'>\r\n\r\n            <ImageContainer data={data} />\r\n\r\n            <div className='statsContainer'>\r\n                <div className='stats'>\r\n                    <label>name : </label>\r\n                    <p data-testid=\"name\">{data.name.toUpperCase()}</p>\r\n                </div>\r\n\r\n                <div className='stats'>\r\n                    <label>Battle Only :</label>\r\n                    <p> {data.is_battle_only ? 'SI' : 'NO'}</p>\r\n                </div>\r\n\r\n                <div className='stats'>\r\n                    <label>  Types:</label>\r\n                    <div>\r\n                        {\r\n                            data.types.map(elem =>\r\n                            (<button\r\n                                className={(type.type === elem.type.name) ? 'active' : ''}\r\n                                key={elem.slot}\r\n                                onClick={() => handeSetTypeStac(elem.type)}\r\n                            >{elem.type.name}</button>)\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <TypeStacs src={type.src} />\r\n            </div>\r\n        </div>\r\n\r\n        )\r\n    )\r\n}\r\n","import React, { createContext } from 'react'\r\n\r\n\r\nexport const pokeContext = createContext();\r\n","import React from 'react'\r\n\r\nexport const NavigateButtons = ({\r\n    handleSetUrL,\r\n    next,\r\n    previous\r\n}) => {\r\n\r\n\r\n    const styles = {\r\n        container: {\r\n            display: 'flex',\r\n            alignItems : 'center',\r\n            backgroundColor: 'rgb(43,47,51)',\r\n            justifyContent: 'space-between',\r\n            flexDirection: 'row',\r\n            marginTop: '1rem',\r\n            marginBottom: '2rem',\r\n        },\r\n        button:{\r\n            border: '2px solid grey',\r\n            backgroundColor: 'transparent',\r\n            marginLeft: '10px',\r\n            marginRight: '10px',\r\n            color: 'grey',\r\n            width: '5rem',\r\n            height: '2rem',\r\n        }\r\n    }\r\n    return (\r\n        <div style={ styles.container }>\r\n\r\n            <button \r\n                style={ styles.button }\r\n                onClick={ ()=> handleSetUrL(previous) }\r\n            > \r\n                PREVIOS \r\n            </button>\r\n\r\n            <button \r\n                style={ styles.button }\r\n                onClick={ ()=> handleSetUrL(next) }\r\n            >\r\n                NEXT \r\n            </button>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './loadIcon.css'\r\n\r\nexport const LoadIcon = () => {\r\n\r\n    return (\r\n        <div className=\"lds-dual-ring\"></div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport './pokeCard.css'\r\n\r\nexport const PokeCard = ({ pokemon, sprites, id }) => {\r\n\r\n\r\n    return (\r\n\r\n        <div className=\"card col-sm-6 mb-2 cardStyles animate__animated animate__fadeIn animate__delay-.5s\">\r\n            <div className=\"col-md-6\">\r\n                <div className='cardCenter'>\r\n\r\n                    <Link to={`/pokes/character/${id}`}>\r\n                        <img\r\n                            className='cardImg card-img'\r\n                            src={sprites.front_default}\r\n                            alt={pokemon.name}\r\n                        />\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            <div className=\"col-md-8\">\r\n                <div className=\"card-body\">\r\n\r\n                    <h2\r\n                        style={{ textAlign: 'center' }}\r\n                    > {pokemon.name}\r\n                    </h2>\r\n\r\n                    <hr></hr>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nPokeCard.propTypes = {\r\n    pokemon: PropTypes.object.isRequired,\r\n    sprites: PropTypes.object.isRequired,\r\n    id: PropTypes.number.isRequired\r\n}\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './pokeList.css'\r\n\r\nimport { PokeCard } from './pokeCard/PokeCard';\r\n\r\n\r\nexport const PokeList = ({ results }) => {\r\n\r\n    const styles = {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-around',\r\n    }\r\n    return (\r\n        <div className=\"listContainer\">\r\n            <ul style={styles}>\r\n\r\n                {\r\n                    results &&\r\n                    (results.map(character => (\r\n                        <PokeCard\r\n                            {...character}\r\n                            key={character.name}\r\n                        />\r\n                    )))\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nPokeList.propTypes = {\r\n    results: PropTypes.array.isRequired\r\n}","import React, { useCallback, useContext, useEffect, useState } from 'react'\r\nimport { pokeContext } from '../../context/pokeContext'\r\nimport { getCharactersData } from '../../helpers/getPokesApi'\r\nimport { NavigateButtons } from '../UI/buttons/NavigateButtons'\r\nimport { LoadIcon } from '../UI/loading/LoadIcon'\r\nimport { PokeList } from './PokeList'\r\n\r\n\r\nexport const PokeScreen = () => {\r\n\r\n    const styles = {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        backgroundColor: 'rgb(43,47,51)',\r\n        justifyContent: 'center',\r\n        flexDirection: 'column',\r\n        marginTop: '2rem',\r\n        width: '100%',\r\n        height: '100%'\r\n    }\r\n\r\n    const { state, handleSetUrL, stopLoading, startLoading } = useContext(pokeContext);\r\n    const { data, loading, error } = state;\r\n\r\n    const { results, next, previous } = data\r\n\r\n    const [characters, setstate] = useState([])\r\n\r\n    const getData = useCallback(\r\n        async () => {\r\n            if (results) {\r\n\r\n                const data = await getCharactersData(results)\r\n                return data\r\n            }\r\n        },\r\n        [results],\r\n    );\r\n\r\n\r\n    useEffect(() => {\r\n        startLoading()\r\n        getData().then(data => {\r\n\r\n            setTimeout(() => {\r\n\r\n                setstate(data)\r\n                stopLoading();\r\n            }, 1000);\r\n\r\n        })\r\n    }, [getData])\r\n\r\n    return (\r\n        <div style={styles}>\r\n            <NavigateButtons\r\n                handleSetUrL={handleSetUrL}\r\n                next={next}\r\n                previous={previous}\r\n            />\r\n            {\r\n                (loading) ?\r\n                    (<LoadIcon />)\r\n                    :\r\n                    (<PokeList results={characters} />)\r\n            }\r\n            <NavigateButtons\r\n                handleSetUrL={handleSetUrL}\r\n                next={next}\r\n                previous={previous}\r\n            />\r\n            {\r\n                (error) && (alert(error))\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Link, NavLink, useHistory } from 'react-router-dom'\r\nimport { pokeContext } from '../../context/pokeContext'\r\n\r\nexport const Navbar = () => {\r\n\r\n    const { handleSetUrL }=useContext(pokeContext)\r\n\r\n    const handleInico = () => {\r\n        handleSetUrL(`https://pokeapi.co/api/v2/pokemon-form/?limit=5&offset=5`);\r\n    }\r\n\r\n\r\n    return (\r\n        <nav className=\"container-fluid navbar navbar-expand-sm navbar-dark bg-dark\">\r\n            \r\n            <Link \r\n                className=\"navbar-brand\" \r\n                to=\"/\"\r\n            >\r\n                Asociaciones\r\n            </Link>\r\n\r\n            <div className=\"navbar-collapse\">\r\n                <div className=\"navbar-nav\">\r\n\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/pokes\"\r\n                        onClick={ handleInico }\r\n                    >\r\n                        Inicio\r\n                    </NavLink>\r\n\r\n\r\n                    <NavLink \r\n                        activeClassName=\"active\"\r\n                        className=\"nav-item nav-link\" \r\n                        exact\r\n                        to=\"/search\"\r\n                    >\r\n                        Search\r\n                    </NavLink>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}","import React from 'react';\r\nimport { Redirect, Route, Switch } from 'react-router';\r\nimport { CharacterScreen } from '../components/pokemons/characterScreen/CharacterScreen';\r\nimport { PokeScreen } from '../components/pokemons/PokeScreen';\r\nimport { Navbar } from '../components/UI/NavBar';\r\n\r\n\r\nexport const DashBoardRoutes = () => {\r\n\r\n    return (\r\n        <div>\r\n            <Navbar/>\r\n\r\n                <Switch>\r\n\r\n                    <Route exact path=\"/pokes\" render={ ()=> <PokeScreen/> }/>\r\n                    <Route exact path=\"/pokes/character/:id\" render={ ()=> <CharacterScreen/>}/>\r\n\r\n\r\n                    {/* <Route exact path=\"/heroe/:heroeId\" component={ HeroesScreen }/> */}\r\n                    {/* <Route exact path=\"/marvel\" component={ MarvelScreen }/> */}\r\n                    {/* <Route exact path=\"/search\" component={ SearchScreen }/> */}\r\n\r\n                    <Redirect to=\"/pokes\"/>\r\n                </Switch>\r\n            </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Redirect, Route } from 'react-router';\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const PrivateRoutes = ({ \r\n    isAutenticated,\r\n    component: Component,\r\n    ...rest \r\n}) => {\r\n    \r\n    // localStorage.setItem('pathname', JSON.stringify( pathname ));\r\n    // localStorage.setItem('query', JSON.stringify( search ));\r\n\r\n    return (\r\n            <Route \r\n                {...rest}\r\n                render={  props =>{\r\n\r\n                    return(               \r\n\r\n                        (isAutenticated) ?\r\n                            (<Component {...props} />)\r\n                            :\r\n                            (<Redirect to=\"/login\" />)\r\n\r\n                    )}\r\n                }\r\n            />\r\n\r\n    )\r\n}\r\n\r\nPrivateRoutes.propTypes = {\r\n    isAutenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired, \r\n}\r\n","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n} from \"react-router-dom\";\r\n\r\nimport { DashBoardRoutes } from './DashBoardRoutes';\r\nimport { PrivateRoutes } from './PrivateRoutes';\r\n\r\n// import { PublicRoutes } from './PublicRoutes';\r\n  \r\n\r\nexport const AppRouter = () => {\r\n\r\n\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <Switch>\r\n\r\n            {/* <PublicRoutes isAutenticated={ logged } path=\"/login\" component={ LoginScreen }/> */}\r\n            <PrivateRoutes isAutenticated={ true } path=\"/\" component={ DashBoardRoutes }/>\r\n\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    )\r\n}\r\n","import { getPokes } from \"../helpers/getPokesApi\";\r\n\r\nimport React, { useEffect, useState } from 'react'\r\n\r\nconst incialState = {\r\n    data: {},\r\n    loading: true,\r\n    error: null,\r\n}\r\nexport const useFetchPokes = ( inicialUrl  ) => {\r\n    \r\n\r\n    const [url, setUrl] = useState(inicialUrl)\r\n    const [state, setState] = useState(incialState);\r\n    \r\n    \r\n    const handleSetUrL = (url) => (setUrl( url ))\r\n\r\n    const stopLoading = () => {\r\n        setState( s => ({\r\n            ...s,\r\n            loading: false\r\n        }))\r\n    }\r\n    const startLoading = () => {\r\n        setState( s => ({\r\n            ...s,\r\n            loading: true\r\n        }))\r\n    }\r\n\r\n    useEffect(()=>{\r\n        \r\n        console.log(url);\r\n        const data = getPokes(url);\r\n            data.then( pokes => {\r\n\r\n                setState( s => ({\r\n                    ...s,\r\n                    data: pokes\r\n                }))\r\n            })\r\n            .catch( err => {\r\n                setState(s =>({\r\n                    ...s,\r\n                    loading: false,\r\n                    error: err\r\n                }))\r\n            })\r\n\r\n    }, [url] )\r\n        \r\n    return [state, url, handleSetUrL, stopLoading,startLoading ];\r\n}\r\n\r\n    ","import React, { memo, useEffect, useReducer } from 'react'\r\nimport { AppRouter } from './routes/AppRouter'\r\nimport  \"./index.css\";\r\nimport { pokeContext } from './context/pokeContext';\r\nimport { useFetchPokes } from './hooks/useFetchPokes';\r\n\r\n\r\n\r\nexport const PokeApp = () => {\r\n\r\n\r\n    const inicialUrl = localStorage.getItem('url') || \r\n    `https://pokeapi.co/api/v2/pokemon-form/?limit=5&offset=5`;\r\n    \r\n    const [ state, \r\n            url, \r\n            handleSetUrL, \r\n            stopLoading,\r\n            startLoading ] =  useFetchPokes(inicialUrl);\r\n\r\n    useEffect(() => {\r\n\r\n        localStorage.setItem('url', url)\r\n        \r\n    }, [url])\r\n\r\n    \r\n    return (\r\n\r\n\r\n        <pokeContext.Provider value={{ \r\n            state, \r\n            url, \r\n            handleSetUrL, \r\n            stopLoading,\r\n            startLoading }}\r\n        >\r\n\r\n                <AppRouter/>\r\n\r\n        </pokeContext.Provider>\r\n        // <>\r\n        // <button onClick={()=>stopLoading()}> stop </button> \r\n        // <button onClick={()=>startLoading()}> start </button> \r\n        // </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { PokeApp } from './PokeApp';\r\n\r\nReactDOM.render(\r\n  <PokeApp/>, \r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}